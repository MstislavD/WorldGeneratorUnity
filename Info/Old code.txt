    void calculatePentagonNeighbors(Polygon pentagon, int index)
    {
        for (int i = 0; i < 5; i++)
        {
            int band = -1;
            int zone = GlobeTopology.GetZoneFromVertex(index, i);
            for (int j = 0; j < 3; j++)
            {
                if (GlobeTopology.GetVertexFromZone(zone, j) == index)
                {
                    band = GlobeTopology.GetBandFromZone(zone, j);
                }
            }
            //pentagon.SetNeighbor(i, 12 + band * bandSize + (GlobeTopology.GetZoneFromBand(band, 0) == zone ? bandSize - 1 : 0));
        }
    }

private void calculateBandHexNeighbors(int bandIndex, Polygon hexagon, int i)
    {
        int zi1 = GlobeTopology.GetZoneFromBand(bandIndex, 0);
        int zi2 = GlobeTopology.GetZoneFromBand(bandIndex, 1);
        int d1 = GlobeTopology.GetDirectionFromBand(bandIndex, 0);
        int d2 = GlobeTopology.GetDirectionFromBand(bandIndex, 1);

        int zoneSize = bandSize * (bandSize - 1) / 2;
        int polygonIndex = 12 + bandIndex * bandSize;

        int z1FirstPolygonIndex = 12 + 30 * bandSize + zi1 * zoneSize;
        int z1LastPolygonIndex = z1FirstPolygonIndex + zoneSize;
        int z2FirstPolygonIndex = 12 + 30 * bandSize + zi2 * zoneSize;
        int z2LastPolygonIndex = z2FirstPolygonIndex + zoneSize;

        int[] n = { -1, -1, -1, -1, -1, -1 };

        if (i == 0)
        {
            int neighborBand = GlobeTopology.GetBandFromZone(zi1, (d1 + 1) % 3);
            n[0] = 12 + neighborBand * bandSize + (GlobeTopology.GetZoneFromBand(neighborBand, 0) == zi1 ? bandSize - 1 : 0);
        }
        else if (d1 == 0)
        {
            n[0] = z1FirstPolygonIndex + (bandSize - i) * (bandSize - i + 1) / 2 - 1;
        }
        else if (d1 == 1)
        {
            n[0] = z1LastPolygonIndex - bandSize + i;
        }
        else if (d1 == 2)
        {
            n[0] = z1FirstPolygonIndex + i * (i - 1) / 2;
        }

        if (i == bandSize - 1)
        {
            int neighborBand = GlobeTopology.GetBandFromZone(zi1, (d1 + 2) % 3);
            n[1] = 12 + neighborBand * bandSize + (GlobeTopology.GetZoneFromBand(neighborBand, 0) == zi1 ? 0 : bandSize - 1);
        }
        else if (d1 == 0)
        {
            n[1] = z1FirstPolygonIndex + (bandSize - i - 1) * (bandSize - i) / 2 - 1;
        }
        else if (d1 == 1)
        {
            n[1] = z1LastPolygonIndex - bandSize + i + 1;
        }
        else if (d1 == 2)
        {
            n[1] = z1FirstPolygonIndex + i * (i + 1) / 2;
        }

        if (i == bandSize - 1)
        {
            int neighborBand = GlobeTopology.GetBandFromZone(zi2, (d2 + 1) % 3);
            n[3] = 12 + neighborBand * bandSize + (GlobeTopology.GetZoneFromBand(neighborBand, 0) == zi2 ? bandSize - 1 : 0);
        }
        else if (d2 == 0)
        {
            n[3] = z2FirstPolygonIndex + (i + 1) * (i + 2) / 2 - 1;
        }
        else if (d2 == 1)
        {
            n[3] = z2LastPolygonIndex - i - 1;
        }
        else if (d2 == 2)
        {
            n[3] = z2FirstPolygonIndex + (bandSize - i - 1) * (bandSize - i - 2) / 2;
        }

        if (i == 0)
        {
            int neighborBand = GlobeTopology.GetBandFromZone(zi2, (d2 + 2) % 3);
            n[4] = 12 + neighborBand * bandSize + (GlobeTopology.GetZoneFromBand(neighborBand, 0) == zi2 ? 0 : bandSize - 1);
        }
        else if (d2 == 0)
        {
            n[4] = z2FirstPolygonIndex + i * (i + 1) / 2 - 1;
        }
        else if (d2 == 1)
        {
            n[4] = z2LastPolygonIndex - i;
        }
        else if (d2 == 2)
        {
            n[4] = z2FirstPolygonIndex + (bandSize - i - 1) * (bandSize - i) / 2;
        }

        n[2] = i < bandSize - 1 ? polygonIndex + i + 1 : GlobeTopology.GetVertexFromZone(zi1, d1);
        n[5] = i > 0 ? polygonIndex + i - 1 : GlobeTopology.GetVertexFromZone(zi1, (d1 + 1) % 3);

        for (int j = 0; j < n.Length; j++)
        {
           // hexagon.SetNeighbor(j, n[j]);
        }
    }

 private void calculateZoneHexNeighbors(int zoneIndex, Polygon hexagon, int i, int j)
    {
        int[] n = { -1, -1, -1, -1, -1, -1 };

        int zoneSize = bandSize * (bandSize - 1) / 2;
        int h0 = 12 + 30 * bandSize + zoneIndex * zoneSize;
        int b0 = GlobeTopology.GetBandFromZone(zoneIndex, 0);
        int b1 = GlobeTopology.GetBandFromZone(zoneIndex, 1);
        int b2 = GlobeTopology.GetBandFromZone(zoneIndex, 2);

        if (i == j)
        {
            n[0] = 12 + bandSize * b0 + (GlobeTopology.GetZoneFromBand(b0, 0) == zoneIndex ? bandSize - i - 1 : i);
        }
        else
        {
            n[0] = h0 + i * (i - 1) / 2 + j;
        }

        if (i == j)
        {
            n[1] = 12 + bandSize * b0 + (GlobeTopology.GetZoneFromBand(b0, 0) == zoneIndex ? bandSize - i - 2 : i + 1);
        }
        else
        {
            n[1] = h0 + i * (i + 1) / 2 + j + 1;
        }

        if (i == bandSize - 2)
        {
            n[2] = 12 + bandSize * b1 + (GlobeTopology.GetZoneFromBand(b1, 0) == zoneIndex ? j + 1 : bandSize - j - 2);
        }
        else
        {
            n[2] = h0 + (i + 1) * (i + 2) / 2 + j + 1;
        }

        if (i == bandSize - 2)
        {
            n[3] = 12 + bandSize * b1 + (GlobeTopology.GetZoneFromBand(b1, 0) == zoneIndex ? j : bandSize - j - 1);
        }
        else
        {
            n[3] = h0 + (i + 1) * (i + 2) / 2 + j;
        }

        if (j == 0)
        {
            n[4] = 12 + bandSize * b2 + (GlobeTopology.GetZoneFromBand(b2, 0) == zoneIndex ? i + 1 : bandSize - i - 2);
        }
        else
        {
            n[4] = h0 + i * (i + 1) / 2 + j - 1;
        }

        if (j == 0)
        {
            n[5] = 12 + bandSize * b2 + (GlobeTopology.GetZoneFromBand(b2, 0) == zoneIndex ? i : bandSize - i - 1);
        }
        else
        {
            n[5] = h0 + i * (i - 1) / 2 + j - 1;
        }

        for (int k = 0; k < n.Length; k++)
        {
            //hexagon.SetNeighbor(k, n[k]);
        }
    }